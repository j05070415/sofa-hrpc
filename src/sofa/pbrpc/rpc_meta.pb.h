// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sofa/pbrpc/rpc_meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sofa_2fpbrpc_2frpc_5fmeta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sofa_2fpbrpc_2frpc_5fmeta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sofa/pbrpc/rpc_option.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sofa_2fpbrpc_2frpc_5fmeta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sofa_2fpbrpc_2frpc_5fmeta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sofa_2fpbrpc_2frpc_5fmeta_2eproto;
namespace sofa {
namespace pbrpc {
class RpcMeta;
class RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
}  // namespace pbrpc
}  // namespace sofa
PROTOBUF_NAMESPACE_OPEN
template<> ::sofa::pbrpc::RpcMeta* Arena::CreateMaybeMessage<::sofa::pbrpc::RpcMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sofa {
namespace pbrpc {

enum RpcMeta_Type : int {
  RpcMeta_Type_REQUEST = 0,
  RpcMeta_Type_RESPONSE = 1,
  RpcMeta_Type_RpcMeta_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RpcMeta_Type_RpcMeta_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RpcMeta_Type_IsValid(int value);
constexpr RpcMeta_Type RpcMeta_Type_Type_MIN = RpcMeta_Type_REQUEST;
constexpr RpcMeta_Type RpcMeta_Type_Type_MAX = RpcMeta_Type_RESPONSE;
constexpr int RpcMeta_Type_Type_ARRAYSIZE = RpcMeta_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcMeta_Type_descriptor();
template<typename T>
inline const std::string& RpcMeta_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcMeta_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcMeta_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcMeta_Type_descriptor(), enum_t_value);
}
inline bool RpcMeta_Type_Parse(
    const std::string& name, RpcMeta_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcMeta_Type>(
    RpcMeta_Type_descriptor(), name, value);
}
// ===================================================================

class RpcMeta PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.RpcMeta) */ {
 public:
  inline RpcMeta() : RpcMeta(nullptr) {};
  virtual ~RpcMeta();

  RpcMeta(const RpcMeta& from);
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMeta* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta* New() const final {
    return CreateMaybeMessage<RpcMeta>(nullptr);
  }

  RpcMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.RpcMeta";
  }
  protected:
  explicit RpcMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2frpc_5fmeta_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2frpc_5fmeta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RpcMeta_Type Type;
  static constexpr Type REQUEST =
    RpcMeta_Type_REQUEST;
  static constexpr Type RESPONSE =
    RpcMeta_Type_RESPONSE;
  static inline bool Type_IsValid(int value) {
    return RpcMeta_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RpcMeta_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RpcMeta_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RpcMeta_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RpcMeta_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RpcMeta_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return RpcMeta_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 100,
    kReasonFieldNumber = 202,
    kSequenceIdFieldNumber = 2,
    kExpectedResponseCompressTypeFieldNumber = 301,
    kTypeFieldNumber = 1,
    kFailedFieldNumber = 200,
    kServerTimeoutFieldNumber = 101,
    kErrorCodeFieldNumber = 201,
    kCompressTypeFieldNumber = 300,
  };
  // string method = 100;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string reason = 202;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint64 sequence_id = 2;
  void clear_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id() const;
  void set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_id() const;
  void _internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .sofa.pbrpc.CompressType expected_response_compress_type = 301;
  void clear_expected_response_compress_type();
  ::sofa::pbrpc::CompressType expected_response_compress_type() const;
  void set_expected_response_compress_type(::sofa::pbrpc::CompressType value);
  private:
  ::sofa::pbrpc::CompressType _internal_expected_response_compress_type() const;
  void _internal_set_expected_response_compress_type(::sofa::pbrpc::CompressType value);
  public:

  // .sofa.pbrpc.RpcMeta.Type type = 1;
  void clear_type();
  ::sofa::pbrpc::RpcMeta_Type type() const;
  void set_type(::sofa::pbrpc::RpcMeta_Type value);
  private:
  ::sofa::pbrpc::RpcMeta_Type _internal_type() const;
  void _internal_set_type(::sofa::pbrpc::RpcMeta_Type value);
  public:

  // bool failed = 200;
  void clear_failed();
  bool failed() const;
  void set_failed(bool value);
  private:
  bool _internal_failed() const;
  void _internal_set_failed(bool value);
  public:

  // int64 server_timeout = 101;
  void clear_server_timeout();
  ::PROTOBUF_NAMESPACE_ID::int64 server_timeout() const;
  void set_server_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_timeout() const;
  void _internal_set_server_timeout(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 error_code = 201;
  void clear_error_code();
  ::PROTOBUF_NAMESPACE_ID::int32 error_code() const;
  void set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error_code() const;
  void _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .sofa.pbrpc.CompressType compress_type = 300;
  void clear_compress_type();
  ::sofa::pbrpc::CompressType compress_type() const;
  void set_compress_type(::sofa::pbrpc::CompressType value);
  private:
  ::sofa::pbrpc::CompressType _internal_compress_type() const;
  void _internal_set_compress_type(::sofa::pbrpc::CompressType value);
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.RpcMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_id_;
  int expected_response_compress_type_;
  int type_;
  bool failed_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_timeout_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
  int compress_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2frpc_5fmeta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcMeta

// .sofa.pbrpc.RpcMeta.Type type = 1;
inline void RpcMeta::clear_type() {
  type_ = 0;
}
inline ::sofa::pbrpc::RpcMeta_Type RpcMeta::_internal_type() const {
  return static_cast< ::sofa::pbrpc::RpcMeta_Type >(type_);
}
inline ::sofa::pbrpc::RpcMeta_Type RpcMeta::type() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.type)
  return _internal_type();
}
inline void RpcMeta::_internal_set_type(::sofa::pbrpc::RpcMeta_Type value) {
  
  type_ = value;
}
inline void RpcMeta::set_type(::sofa::pbrpc::RpcMeta_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.type)
}

// uint64 sequence_id = 2;
inline void RpcMeta::clear_sequence_id() {
  sequence_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta::_internal_sequence_id() const {
  return sequence_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcMeta::sequence_id() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.sequence_id)
  return _internal_sequence_id();
}
inline void RpcMeta::_internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_id_ = value;
}
inline void RpcMeta::set_sequence_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.sequence_id)
}

// string method = 100;
inline void RpcMeta::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RpcMeta::method() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.method)
  return _internal_method();
}
inline void RpcMeta::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.method)
}
inline std::string* RpcMeta::mutable_method() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.RpcMeta.method)
  return _internal_mutable_method();
}
inline const std::string& RpcMeta::_internal_method() const {
  return method_.Get();
}
inline void RpcMeta::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RpcMeta::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.RpcMeta.method)
}
inline void RpcMeta::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.RpcMeta.method)
}
inline void RpcMeta::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.RpcMeta.method)
}
inline std::string* RpcMeta::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RpcMeta::release_method() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.RpcMeta.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RpcMeta::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.RpcMeta.method)
}
inline std::string* RpcMeta::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.RpcMeta.method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RpcMeta::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method != nullptr) {
    
  } else {
    
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.RpcMeta.method)
}

// int64 server_timeout = 101;
inline void RpcMeta::clear_server_timeout() {
  server_timeout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RpcMeta::_internal_server_timeout() const {
  return server_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RpcMeta::server_timeout() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.server_timeout)
  return _internal_server_timeout();
}
inline void RpcMeta::_internal_set_server_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_timeout_ = value;
}
inline void RpcMeta::set_server_timeout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_timeout(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.server_timeout)
}

// bool failed = 200;
inline void RpcMeta::clear_failed() {
  failed_ = false;
}
inline bool RpcMeta::_internal_failed() const {
  return failed_;
}
inline bool RpcMeta::failed() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.failed)
  return _internal_failed();
}
inline void RpcMeta::_internal_set_failed(bool value) {
  
  failed_ = value;
}
inline void RpcMeta::set_failed(bool value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.failed)
}

// int32 error_code = 201;
inline void RpcMeta::clear_error_code() {
  error_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcMeta::_internal_error_code() const {
  return error_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcMeta::error_code() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.error_code)
  return _internal_error_code();
}
inline void RpcMeta::_internal_set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_code_ = value;
}
inline void RpcMeta::set_error_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.error_code)
}

// string reason = 202;
inline void RpcMeta::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RpcMeta::reason() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.reason)
  return _internal_reason();
}
inline void RpcMeta::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.reason)
}
inline std::string* RpcMeta::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.RpcMeta.reason)
  return _internal_mutable_reason();
}
inline const std::string& RpcMeta::_internal_reason() const {
  return reason_.Get();
}
inline void RpcMeta::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RpcMeta::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.RpcMeta.reason)
}
inline void RpcMeta::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.RpcMeta.reason)
}
inline void RpcMeta::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.RpcMeta.reason)
}
inline std::string* RpcMeta::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RpcMeta::release_reason() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.RpcMeta.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RpcMeta::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.RpcMeta.reason)
}
inline std::string* RpcMeta::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.RpcMeta.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RpcMeta::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.RpcMeta.reason)
}

// .sofa.pbrpc.CompressType compress_type = 300;
inline void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
}
inline ::sofa::pbrpc::CompressType RpcMeta::_internal_compress_type() const {
  return static_cast< ::sofa::pbrpc::CompressType >(compress_type_);
}
inline ::sofa::pbrpc::CompressType RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.compress_type)
  return _internal_compress_type();
}
inline void RpcMeta::_internal_set_compress_type(::sofa::pbrpc::CompressType value) {
  
  compress_type_ = value;
}
inline void RpcMeta::set_compress_type(::sofa::pbrpc::CompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.compress_type)
}

// .sofa.pbrpc.CompressType expected_response_compress_type = 301;
inline void RpcMeta::clear_expected_response_compress_type() {
  expected_response_compress_type_ = 0;
}
inline ::sofa::pbrpc::CompressType RpcMeta::_internal_expected_response_compress_type() const {
  return static_cast< ::sofa::pbrpc::CompressType >(expected_response_compress_type_);
}
inline ::sofa::pbrpc::CompressType RpcMeta::expected_response_compress_type() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.RpcMeta.expected_response_compress_type)
  return _internal_expected_response_compress_type();
}
inline void RpcMeta::_internal_set_expected_response_compress_type(::sofa::pbrpc::CompressType value) {
  
  expected_response_compress_type_ = value;
}
inline void RpcMeta::set_expected_response_compress_type(::sofa::pbrpc::CompressType value) {
  _internal_set_expected_response_compress_type(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.RpcMeta.expected_response_compress_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbrpc
}  // namespace sofa

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sofa::pbrpc::RpcMeta_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sofa::pbrpc::RpcMeta_Type>() {
  return ::sofa::pbrpc::RpcMeta_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sofa_2fpbrpc_2frpc_5fmeta_2eproto
