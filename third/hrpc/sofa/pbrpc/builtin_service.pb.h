// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sofa/pbrpc/builtin_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "sofa/pbrpc/rpc_option.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
namespace sofa {
namespace pbrpc {
namespace builtin {
class HealthRequest;
class HealthRequestDefaultTypeInternal;
extern HealthRequestDefaultTypeInternal _HealthRequest_default_instance_;
class HealthResponse;
class HealthResponseDefaultTypeInternal;
extern HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
class ListServiceRequest;
class ListServiceRequestDefaultTypeInternal;
extern ListServiceRequestDefaultTypeInternal _ListServiceRequest_default_instance_;
class ListServiceResponse;
class ListServiceResponseDefaultTypeInternal;
extern ListServiceResponseDefaultTypeInternal _ListServiceResponse_default_instance_;
class MethodStat;
class MethodStatDefaultTypeInternal;
extern MethodStatDefaultTypeInternal _MethodStat_default_instance_;
class ServerOptions;
class ServerOptionsDefaultTypeInternal;
extern ServerOptionsDefaultTypeInternal _ServerOptions_default_instance_;
class ServerOptionsRequest;
class ServerOptionsRequestDefaultTypeInternal;
extern ServerOptionsRequestDefaultTypeInternal _ServerOptionsRequest_default_instance_;
class ServerOptionsResponse;
class ServerOptionsResponseDefaultTypeInternal;
extern ServerOptionsResponseDefaultTypeInternal _ServerOptionsResponse_default_instance_;
class ServerStatusRequest;
class ServerStatusRequestDefaultTypeInternal;
extern ServerStatusRequestDefaultTypeInternal _ServerStatusRequest_default_instance_;
class ServerStatusResponse;
class ServerStatusResponseDefaultTypeInternal;
extern ServerStatusResponseDefaultTypeInternal _ServerStatusResponse_default_instance_;
class ServiceStat;
class ServiceStatDefaultTypeInternal;
extern ServiceStatDefaultTypeInternal _ServiceStat_default_instance_;
class StatRequest;
class StatRequestDefaultTypeInternal;
extern StatRequestDefaultTypeInternal _StatRequest_default_instance_;
class StatResponse;
class StatResponseDefaultTypeInternal;
extern StatResponseDefaultTypeInternal _StatResponse_default_instance_;
class UpdateOptionsRequest;
class UpdateOptionsRequestDefaultTypeInternal;
extern UpdateOptionsRequestDefaultTypeInternal _UpdateOptionsRequest_default_instance_;
class UpdateOptionsResponse;
class UpdateOptionsResponseDefaultTypeInternal;
extern UpdateOptionsResponseDefaultTypeInternal _UpdateOptionsResponse_default_instance_;
}  // namespace builtin
}  // namespace pbrpc
}  // namespace sofa
PROTOBUF_NAMESPACE_OPEN
template<> ::sofa::pbrpc::builtin::HealthRequest* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::HealthRequest>(Arena*);
template<> ::sofa::pbrpc::builtin::HealthResponse* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::HealthResponse>(Arena*);
template<> ::sofa::pbrpc::builtin::ListServiceRequest* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ListServiceRequest>(Arena*);
template<> ::sofa::pbrpc::builtin::ListServiceResponse* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ListServiceResponse>(Arena*);
template<> ::sofa::pbrpc::builtin::MethodStat* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::MethodStat>(Arena*);
template<> ::sofa::pbrpc::builtin::ServerOptions* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ServerOptions>(Arena*);
template<> ::sofa::pbrpc::builtin::ServerOptionsRequest* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ServerOptionsRequest>(Arena*);
template<> ::sofa::pbrpc::builtin::ServerOptionsResponse* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ServerOptionsResponse>(Arena*);
template<> ::sofa::pbrpc::builtin::ServerStatusRequest* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ServerStatusRequest>(Arena*);
template<> ::sofa::pbrpc::builtin::ServerStatusResponse* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ServerStatusResponse>(Arena*);
template<> ::sofa::pbrpc::builtin::ServiceStat* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::ServiceStat>(Arena*);
template<> ::sofa::pbrpc::builtin::StatRequest* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::StatRequest>(Arena*);
template<> ::sofa::pbrpc::builtin::StatResponse* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::StatResponse>(Arena*);
template<> ::sofa::pbrpc::builtin::UpdateOptionsRequest* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::UpdateOptionsRequest>(Arena*);
template<> ::sofa::pbrpc::builtin::UpdateOptionsResponse* Arena::CreateMaybeMessage<::sofa::pbrpc::builtin::UpdateOptionsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sofa {
namespace pbrpc {
namespace builtin {

// ===================================================================

class HealthRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.HealthRequest) */ {
 public:
  inline HealthRequest() : HealthRequest(nullptr) {};
  virtual ~HealthRequest();

  HealthRequest(const HealthRequest& from);
  HealthRequest(HealthRequest&& from) noexcept
    : HealthRequest() {
    *this = ::std::move(from);
  }

  inline HealthRequest& operator=(const HealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthRequest& operator=(HealthRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthRequest* internal_default_instance() {
    return reinterpret_cast<const HealthRequest*>(
               &_HealthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HealthRequest& a, HealthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthRequest* New() const final {
    return CreateMaybeMessage<HealthRequest>(nullptr);
  }

  HealthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthRequest& from);
  void MergeFrom(const HealthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.HealthRequest";
  }
  protected:
  explicit HealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.HealthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class HealthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.HealthResponse) */ {
 public:
  inline HealthResponse() : HealthResponse(nullptr) {};
  virtual ~HealthResponse();

  HealthResponse(const HealthResponse& from);
  HealthResponse(HealthResponse&& from) noexcept
    : HealthResponse() {
    *this = ::std::move(from);
  }

  inline HealthResponse& operator=(const HealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthResponse& operator=(HealthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthResponse* internal_default_instance() {
    return reinterpret_cast<const HealthResponse*>(
               &_HealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HealthResponse& a, HealthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthResponse* New() const final {
    return CreateMaybeMessage<HealthResponse>(nullptr);
  }

  HealthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthResponse& from);
  void MergeFrom(const HealthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.HealthResponse";
  }
  protected:
  explicit HealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
    kVersionFieldNumber = 2,
    kStartTimeFieldNumber = 3,
  };
  // string health = 1;
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string start_time = 3;
  void clear_start_time();
  const std::string& start_time() const;
  void set_start_time(const std::string& value);
  void set_start_time(std::string&& value);
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  std::string* mutable_start_time();
  std::string* release_start_time();
  void set_allocated_start_time(std::string* start_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_time(
      std::string* start_time);
  private:
  const std::string& _internal_start_time() const;
  void _internal_set_start_time(const std::string& value);
  std::string* _internal_mutable_start_time();
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.HealthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServerOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ServerOptions) */ {
 public:
  inline ServerOptions() : ServerOptions(nullptr) {};
  virtual ~ServerOptions();

  ServerOptions(const ServerOptions& from);
  ServerOptions(ServerOptions&& from) noexcept
    : ServerOptions() {
    *this = ::std::move(from);
  }

  inline ServerOptions& operator=(const ServerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOptions& operator=(ServerOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerOptions* internal_default_instance() {
    return reinterpret_cast<const ServerOptions*>(
               &_ServerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerOptions& a, ServerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerOptions* New() const final {
    return CreateMaybeMessage<ServerOptions>(nullptr);
  }

  ServerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerOptions& from);
  void MergeFrom(const ServerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ServerOptions";
  }
  protected:
  explicit ServerOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkThreadNumFieldNumber = 1,
    kKeepAliveTimeFieldNumber = 2,
    kMaxPendingBufferSizeFieldNumber = 3,
    kMaxThroughputInFieldNumber = 4,
    kMaxThroughputOutFieldNumber = 5,
    kMaxConnectionCountFieldNumber = 8,
    kDisableBuiltinServicesFieldNumber = 6,
    kDisableListServiceFieldNumber = 7,
  };
  // int64 work_thread_num = 1;
  void clear_work_thread_num();
  ::PROTOBUF_NAMESPACE_ID::int64 work_thread_num() const;
  void set_work_thread_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_work_thread_num() const;
  void _internal_set_work_thread_num(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 keep_alive_time = 2;
  void clear_keep_alive_time();
  ::PROTOBUF_NAMESPACE_ID::int64 keep_alive_time() const;
  void set_keep_alive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_keep_alive_time() const;
  void _internal_set_keep_alive_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_pending_buffer_size = 3;
  void clear_max_pending_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int64 max_pending_buffer_size() const;
  void set_max_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_pending_buffer_size() const;
  void _internal_set_max_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_throughput_in = 4;
  void clear_max_throughput_in();
  ::PROTOBUF_NAMESPACE_ID::int64 max_throughput_in() const;
  void set_max_throughput_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_throughput_in() const;
  void _internal_set_max_throughput_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_throughput_out = 5;
  void clear_max_throughput_out();
  ::PROTOBUF_NAMESPACE_ID::int64 max_throughput_out() const;
  void set_max_throughput_out(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_throughput_out() const;
  void _internal_set_max_throughput_out(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_connection_count = 8;
  void clear_max_connection_count();
  ::PROTOBUF_NAMESPACE_ID::int64 max_connection_count() const;
  void set_max_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_connection_count() const;
  void _internal_set_max_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool disable_builtin_services = 6;
  void clear_disable_builtin_services();
  bool disable_builtin_services() const;
  void set_disable_builtin_services(bool value);
  private:
  bool _internal_disable_builtin_services() const;
  void _internal_set_disable_builtin_services(bool value);
  public:

  // bool disable_list_service = 7;
  void clear_disable_list_service();
  bool disable_list_service() const;
  void set_disable_list_service(bool value);
  private:
  bool _internal_disable_list_service() const;
  void _internal_set_disable_list_service(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ServerOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 work_thread_num_;
  ::PROTOBUF_NAMESPACE_ID::int64 keep_alive_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_pending_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_throughput_in_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_throughput_out_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_connection_count_;
  bool disable_builtin_services_;
  bool disable_list_service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServerOptionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ServerOptionsRequest) */ {
 public:
  inline ServerOptionsRequest() : ServerOptionsRequest(nullptr) {};
  virtual ~ServerOptionsRequest();

  ServerOptionsRequest(const ServerOptionsRequest& from);
  ServerOptionsRequest(ServerOptionsRequest&& from) noexcept
    : ServerOptionsRequest() {
    *this = ::std::move(from);
  }

  inline ServerOptionsRequest& operator=(const ServerOptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOptionsRequest& operator=(ServerOptionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerOptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerOptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ServerOptionsRequest*>(
               &_ServerOptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerOptionsRequest& a, ServerOptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOptionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerOptionsRequest* New() const final {
    return CreateMaybeMessage<ServerOptionsRequest>(nullptr);
  }

  ServerOptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerOptionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerOptionsRequest& from);
  void MergeFrom(const ServerOptionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOptionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ServerOptionsRequest";
  }
  protected:
  explicit ServerOptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ServerOptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServerOptionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ServerOptionsResponse) */ {
 public:
  inline ServerOptionsResponse() : ServerOptionsResponse(nullptr) {};
  virtual ~ServerOptionsResponse();

  ServerOptionsResponse(const ServerOptionsResponse& from);
  ServerOptionsResponse(ServerOptionsResponse&& from) noexcept
    : ServerOptionsResponse() {
    *this = ::std::move(from);
  }

  inline ServerOptionsResponse& operator=(const ServerOptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerOptionsResponse& operator=(ServerOptionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerOptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerOptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ServerOptionsResponse*>(
               &_ServerOptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerOptionsResponse& a, ServerOptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerOptionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerOptionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerOptionsResponse* New() const final {
    return CreateMaybeMessage<ServerOptionsResponse>(nullptr);
  }

  ServerOptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerOptionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerOptionsResponse& from);
  void MergeFrom(const ServerOptionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerOptionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ServerOptionsResponse";
  }
  protected:
  explicit ServerOptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .sofa.pbrpc.builtin.ServerOptions options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::sofa::pbrpc::builtin::ServerOptions& options() const;
  ::sofa::pbrpc::builtin::ServerOptions* release_options();
  ::sofa::pbrpc::builtin::ServerOptions* mutable_options();
  void set_allocated_options(::sofa::pbrpc::builtin::ServerOptions* options);
  private:
  const ::sofa::pbrpc::builtin::ServerOptions& _internal_options() const;
  ::sofa::pbrpc::builtin::ServerOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::sofa::pbrpc::builtin::ServerOptions* options);
  ::sofa::pbrpc::builtin::ServerOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ServerOptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sofa::pbrpc::builtin::ServerOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOptionsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.UpdateOptionsRequest) */ {
 public:
  inline UpdateOptionsRequest() : UpdateOptionsRequest(nullptr) {};
  virtual ~UpdateOptionsRequest();

  UpdateOptionsRequest(const UpdateOptionsRequest& from);
  UpdateOptionsRequest(UpdateOptionsRequest&& from) noexcept
    : UpdateOptionsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOptionsRequest& operator=(const UpdateOptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOptionsRequest& operator=(UpdateOptionsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateOptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOptionsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOptionsRequest*>(
               &_UpdateOptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateOptionsRequest& a, UpdateOptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOptionsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOptionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOptionsRequest* New() const final {
    return CreateMaybeMessage<UpdateOptionsRequest>(nullptr);
  }

  UpdateOptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOptionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateOptionsRequest& from);
  void MergeFrom(const UpdateOptionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOptionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.UpdateOptionsRequest";
  }
  protected:
  explicit UpdateOptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .sofa.pbrpc.builtin.ServerOptions options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::sofa::pbrpc::builtin::ServerOptions& options() const;
  ::sofa::pbrpc::builtin::ServerOptions* release_options();
  ::sofa::pbrpc::builtin::ServerOptions* mutable_options();
  void set_allocated_options(::sofa::pbrpc::builtin::ServerOptions* options);
  private:
  const ::sofa::pbrpc::builtin::ServerOptions& _internal_options() const;
  ::sofa::pbrpc::builtin::ServerOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::sofa::pbrpc::builtin::ServerOptions* options);
  ::sofa::pbrpc::builtin::ServerOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.UpdateOptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sofa::pbrpc::builtin::ServerOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOptionsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.UpdateOptionsResponse) */ {
 public:
  inline UpdateOptionsResponse() : UpdateOptionsResponse(nullptr) {};
  virtual ~UpdateOptionsResponse();

  UpdateOptionsResponse(const UpdateOptionsResponse& from);
  UpdateOptionsResponse(UpdateOptionsResponse&& from) noexcept
    : UpdateOptionsResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOptionsResponse& operator=(const UpdateOptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOptionsResponse& operator=(UpdateOptionsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateOptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateOptionsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOptionsResponse*>(
               &_UpdateOptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateOptionsResponse& a, UpdateOptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOptionsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOptionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateOptionsResponse* New() const final {
    return CreateMaybeMessage<UpdateOptionsResponse>(nullptr);
  }

  UpdateOptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateOptionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateOptionsResponse& from);
  void MergeFrom(const UpdateOptionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOptionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.UpdateOptionsResponse";
  }
  protected:
  explicit UpdateOptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
  };
  // .sofa.pbrpc.builtin.ServerOptions options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::sofa::pbrpc::builtin::ServerOptions& options() const;
  ::sofa::pbrpc::builtin::ServerOptions* release_options();
  ::sofa::pbrpc::builtin::ServerOptions* mutable_options();
  void set_allocated_options(::sofa::pbrpc::builtin::ServerOptions* options);
  private:
  const ::sofa::pbrpc::builtin::ServerOptions& _internal_options() const;
  ::sofa::pbrpc::builtin::ServerOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::sofa::pbrpc::builtin::ServerOptions* options);
  ::sofa::pbrpc::builtin::ServerOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.UpdateOptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sofa::pbrpc::builtin::ServerOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServerStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ServerStatusRequest) */ {
 public:
  inline ServerStatusRequest() : ServerStatusRequest(nullptr) {};
  virtual ~ServerStatusRequest();

  ServerStatusRequest(const ServerStatusRequest& from);
  ServerStatusRequest(ServerStatusRequest&& from) noexcept
    : ServerStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServerStatusRequest& operator=(const ServerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatusRequest& operator=(ServerStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServerStatusRequest*>(
               &_ServerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerStatusRequest& a, ServerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatusRequest* New() const final {
    return CreateMaybeMessage<ServerStatusRequest>(nullptr);
  }

  ServerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerStatusRequest& from);
  void MergeFrom(const ServerStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ServerStatusRequest";
  }
  protected:
  explicit ServerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ServerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServerStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ServerStatusResponse) */ {
 public:
  inline ServerStatusResponse() : ServerStatusResponse(nullptr) {};
  virtual ~ServerStatusResponse();

  ServerStatusResponse(const ServerStatusResponse& from);
  ServerStatusResponse(ServerStatusResponse&& from) noexcept
    : ServerStatusResponse() {
    *this = ::std::move(from);
  }

  inline ServerStatusResponse& operator=(const ServerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerStatusResponse& operator=(ServerStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ServerStatusResponse*>(
               &_ServerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServerStatusResponse& a, ServerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerStatusResponse* New() const final {
    return CreateMaybeMessage<ServerStatusResponse>(nullptr);
  }

  ServerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerStatusResponse& from);
  void MergeFrom(const ServerStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ServerStatusResponse";
  }
  protected:
  explicit ServerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionCountFieldNumber = 2,
    kServiceCountFieldNumber = 3,
    kPendingMessageCountFieldNumber = 4,
    kPendingBufferSizeFieldNumber = 5,
    kPendingDataSizeFieldNumber = 6,
    kIsListeningFieldNumber = 1,
  };
  // int64 connection_count = 2;
  void clear_connection_count();
  ::PROTOBUF_NAMESPACE_ID::int64 connection_count() const;
  void set_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_connection_count() const;
  void _internal_set_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 service_count = 3;
  void clear_service_count();
  ::PROTOBUF_NAMESPACE_ID::int64 service_count() const;
  void set_service_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_service_count() const;
  void _internal_set_service_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pending_message_count = 4;
  void clear_pending_message_count();
  ::PROTOBUF_NAMESPACE_ID::int64 pending_message_count() const;
  void set_pending_message_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pending_message_count() const;
  void _internal_set_pending_message_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pending_buffer_size = 5;
  void clear_pending_buffer_size();
  ::PROTOBUF_NAMESPACE_ID::int64 pending_buffer_size() const;
  void set_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pending_buffer_size() const;
  void _internal_set_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pending_data_size = 6;
  void clear_pending_data_size();
  ::PROTOBUF_NAMESPACE_ID::int64 pending_data_size() const;
  void set_pending_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pending_data_size() const;
  void _internal_set_pending_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_listening = 1;
  void clear_is_listening();
  bool is_listening() const;
  void set_is_listening(bool value);
  private:
  bool _internal_is_listening() const;
  void _internal_set_is_listening(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ServerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 connection_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 service_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 pending_message_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 pending_buffer_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 pending_data_size_;
  bool is_listening_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListServiceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ListServiceRequest) */ {
 public:
  inline ListServiceRequest() : ListServiceRequest(nullptr) {};
  virtual ~ListServiceRequest();

  ListServiceRequest(const ListServiceRequest& from);
  ListServiceRequest(ListServiceRequest&& from) noexcept
    : ListServiceRequest() {
    *this = ::std::move(from);
  }

  inline ListServiceRequest& operator=(const ListServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceRequest& operator=(ListServiceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceRequest* internal_default_instance() {
    return reinterpret_cast<const ListServiceRequest*>(
               &_ListServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListServiceRequest& a, ListServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListServiceRequest* New() const final {
    return CreateMaybeMessage<ListServiceRequest>(nullptr);
  }

  ListServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListServiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListServiceRequest& from);
  void MergeFrom(const ListServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ListServiceRequest";
  }
  protected:
  explicit ListServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ListServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListServiceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ListServiceResponse) */ {
 public:
  inline ListServiceResponse() : ListServiceResponse(nullptr) {};
  virtual ~ListServiceResponse();

  ListServiceResponse(const ListServiceResponse& from);
  ListServiceResponse(ListServiceResponse&& from) noexcept
    : ListServiceResponse() {
    *this = ::std::move(from);
  }

  inline ListServiceResponse& operator=(const ListServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListServiceResponse& operator=(ListServiceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListServiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListServiceResponse* internal_default_instance() {
    return reinterpret_cast<const ListServiceResponse*>(
               &_ListServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListServiceResponse& a, ListServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListServiceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListServiceResponse* New() const final {
    return CreateMaybeMessage<ListServiceResponse>(nullptr);
  }

  ListServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListServiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListServiceResponse& from);
  void MergeFrom(const ListServiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListServiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ListServiceResponse";
  }
  protected:
  explicit ListServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 1,
    kFilesFieldNumber = 2,
  };
  // repeated string services = 1;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  const std::string& services(int index) const;
  std::string* mutable_services(int index);
  void set_services(int index, const std::string& value);
  void set_services(int index, std::string&& value);
  void set_services(int index, const char* value);
  void set_services(int index, const char* value, size_t size);
  std::string* add_services();
  void add_services(const std::string& value);
  void add_services(std::string&& value);
  void add_services(const char* value);
  void add_services(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& services() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_services();
  private:
  const std::string& _internal_services(int index) const;
  std::string* _internal_add_services();
  public:

  // repeated .google.protobuf.FileDescriptorProto files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  PROTOBUF_NAMESPACE_ID::FileDescriptorProto* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FileDescriptorProto >*
      mutable_files();
  private:
  const PROTOBUF_NAMESPACE_ID::FileDescriptorProto& _internal_files(int index) const;
  PROTOBUF_NAMESPACE_ID::FileDescriptorProto* _internal_add_files();
  public:
  const PROTOBUF_NAMESPACE_ID::FileDescriptorProto& files(int index) const;
  PROTOBUF_NAMESPACE_ID::FileDescriptorProto* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FileDescriptorProto >&
      files() const;

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ListServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FileDescriptorProto > files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MethodStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.MethodStat) */ {
 public:
  inline MethodStat() : MethodStat(nullptr) {};
  virtual ~MethodStat();

  MethodStat(const MethodStat& from);
  MethodStat(MethodStat&& from) noexcept
    : MethodStat() {
    *this = ::std::move(from);
  }

  inline MethodStat& operator=(const MethodStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline MethodStat& operator=(MethodStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MethodStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MethodStat* internal_default_instance() {
    return reinterpret_cast<const MethodStat*>(
               &_MethodStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MethodStat& a, MethodStat& b) {
    a.Swap(&b);
  }
  inline void Swap(MethodStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MethodStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MethodStat* New() const final {
    return CreateMaybeMessage<MethodStat>(nullptr);
  }

  MethodStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MethodStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MethodStat& from);
  void MergeFrom(const MethodStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MethodStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.MethodStat";
  }
  protected:
  explicit MethodStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodNameFieldNumber = 1,
    kSucceedCountFieldNumber = 2,
    kSucceedMaxTimeUsFieldNumber = 4,
    kSucceedAvgTimeUsFieldNumber = 3,
    kFailedAvgTimeUsFieldNumber = 6,
    kFailedCountFieldNumber = 5,
    kFailedMaxTimeUsFieldNumber = 7,
    kSlotIdFieldNumber = 8,
  };
  // string method_name = 1;
  void clear_method_name();
  const std::string& method_name() const;
  void set_method_name(const std::string& value);
  void set_method_name(std::string&& value);
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  std::string* mutable_method_name();
  std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method_name(
      std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // int64 succeed_count = 2;
  void clear_succeed_count();
  ::PROTOBUF_NAMESPACE_ID::int64 succeed_count() const;
  void set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_succeed_count() const;
  void _internal_set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 succeed_max_time_us = 4;
  void clear_succeed_max_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 succeed_max_time_us() const;
  void set_succeed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_succeed_max_time_us() const;
  void _internal_set_succeed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float succeed_avg_time_us = 3;
  void clear_succeed_avg_time_us();
  float succeed_avg_time_us() const;
  void set_succeed_avg_time_us(float value);
  private:
  float _internal_succeed_avg_time_us() const;
  void _internal_set_succeed_avg_time_us(float value);
  public:

  // float failed_avg_time_us = 6;
  void clear_failed_avg_time_us();
  float failed_avg_time_us() const;
  void set_failed_avg_time_us(float value);
  private:
  float _internal_failed_avg_time_us() const;
  void _internal_set_failed_avg_time_us(float value);
  public:

  // int64 failed_count = 5;
  void clear_failed_count();
  ::PROTOBUF_NAMESPACE_ID::int64 failed_count() const;
  void set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_failed_count() const;
  void _internal_set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 failed_max_time_us = 7;
  void clear_failed_max_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 failed_max_time_us() const;
  void set_failed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_failed_max_time_us() const;
  void _internal_set_failed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 slot_id = 8;
  void clear_slot_id();
  ::PROTOBUF_NAMESPACE_ID::int64 slot_id() const;
  void set_slot_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_slot_id() const;
  void _internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.MethodStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 succeed_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 succeed_max_time_us_;
  float succeed_avg_time_us_;
  float failed_avg_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 failed_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 failed_max_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 slot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServiceStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.ServiceStat) */ {
 public:
  inline ServiceStat() : ServiceStat(nullptr) {};
  virtual ~ServiceStat();

  ServiceStat(const ServiceStat& from);
  ServiceStat(ServiceStat&& from) noexcept
    : ServiceStat() {
    *this = ::std::move(from);
  }

  inline ServiceStat& operator=(const ServiceStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStat& operator=(ServiceStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStat* internal_default_instance() {
    return reinterpret_cast<const ServiceStat*>(
               &_ServiceStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ServiceStat& a, ServiceStat& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceStat* New() const final {
    return CreateMaybeMessage<ServiceStat>(nullptr);
  }

  ServiceStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceStat& from);
  void MergeFrom(const ServiceStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.ServiceStat";
  }
  protected:
  explicit ServiceStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodStatsFieldNumber = 5,
    kServiceNameFieldNumber = 1,
    kPeriodSecondsFieldNumber = 2,
    kSucceedCountFieldNumber = 3,
    kFailedCountFieldNumber = 4,
  };
  // repeated .sofa.pbrpc.builtin.MethodStat method_stats = 5;
  int method_stats_size() const;
  private:
  int _internal_method_stats_size() const;
  public:
  void clear_method_stats();
  ::sofa::pbrpc::builtin::MethodStat* mutable_method_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::MethodStat >*
      mutable_method_stats();
  private:
  const ::sofa::pbrpc::builtin::MethodStat& _internal_method_stats(int index) const;
  ::sofa::pbrpc::builtin::MethodStat* _internal_add_method_stats();
  public:
  const ::sofa::pbrpc::builtin::MethodStat& method_stats(int index) const;
  ::sofa::pbrpc::builtin::MethodStat* add_method_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::MethodStat >&
      method_stats() const;

  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // int64 period_seconds = 2;
  void clear_period_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 period_seconds() const;
  void set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_period_seconds() const;
  void _internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 succeed_count = 3;
  void clear_succeed_count();
  ::PROTOBUF_NAMESPACE_ID::int64 succeed_count() const;
  void set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_succeed_count() const;
  void _internal_set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 failed_count = 4;
  void clear_failed_count();
  ::PROTOBUF_NAMESPACE_ID::int64 failed_count() const;
  void set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_failed_count() const;
  void _internal_set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.ServiceStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::MethodStat > method_stats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 period_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int64 succeed_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 failed_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.StatRequest) */ {
 public:
  inline StatRequest() : StatRequest(nullptr) {};
  virtual ~StatRequest();

  StatRequest(const StatRequest& from);
  StatRequest(StatRequest&& from) noexcept
    : StatRequest() {
    *this = ::std::move(from);
  }

  inline StatRequest& operator=(const StatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatRequest& operator=(StatRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatRequest* internal_default_instance() {
    return reinterpret_cast<const StatRequest*>(
               &_StatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StatRequest& a, StatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatRequest* New() const final {
    return CreateMaybeMessage<StatRequest>(nullptr);
  }

  StatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatRequest& from);
  void MergeFrom(const StatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.StatRequest";
  }
  protected:
  explicit StatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kPeriodSecondsFieldNumber = 2,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // int64 period_seconds = 2;
  void clear_period_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 period_seconds() const;
  void set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_period_seconds() const;
  void _internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.StatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 period_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sofa.pbrpc.builtin.StatResponse) */ {
 public:
  inline StatResponse() : StatResponse(nullptr) {};
  virtual ~StatResponse();

  StatResponse(const StatResponse& from);
  StatResponse(StatResponse&& from) noexcept
    : StatResponse() {
    *this = ::std::move(from);
  }

  inline StatResponse& operator=(const StatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatResponse& operator=(StatResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatResponse* internal_default_instance() {
    return reinterpret_cast<const StatResponse*>(
               &_StatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StatResponse& a, StatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatResponse* New() const final {
    return CreateMaybeMessage<StatResponse>(nullptr);
  }

  StatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatResponse& from);
  void MergeFrom(const StatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sofa.pbrpc.builtin.StatResponse";
  }
  protected:
  explicit StatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto);
    return ::descriptor_table_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceStatsFieldNumber = 1,
    kServerStartTimeFieldNumber = 2,
  };
  // repeated .sofa.pbrpc.builtin.ServiceStat service_stats = 1;
  int service_stats_size() const;
  private:
  int _internal_service_stats_size() const;
  public:
  void clear_service_stats();
  ::sofa::pbrpc::builtin::ServiceStat* mutable_service_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::ServiceStat >*
      mutable_service_stats();
  private:
  const ::sofa::pbrpc::builtin::ServiceStat& _internal_service_stats(int index) const;
  ::sofa::pbrpc::builtin::ServiceStat* _internal_add_service_stats();
  public:
  const ::sofa::pbrpc::builtin::ServiceStat& service_stats(int index) const;
  ::sofa::pbrpc::builtin::ServiceStat* add_service_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::ServiceStat >&
      service_stats() const;

  // string server_start_time = 2;
  void clear_server_start_time();
  const std::string& server_start_time() const;
  void set_server_start_time(const std::string& value);
  void set_server_start_time(std::string&& value);
  void set_server_start_time(const char* value);
  void set_server_start_time(const char* value, size_t size);
  std::string* mutable_server_start_time();
  std::string* release_server_start_time();
  void set_allocated_server_start_time(std::string* server_start_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_start_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_start_time(
      std::string* server_start_time);
  private:
  const std::string& _internal_server_start_time() const;
  void _internal_set_server_start_time(const std::string& value);
  std::string* _internal_mutable_server_start_time();
  public:

  // @@protoc_insertion_point(class_scope:sofa.pbrpc.builtin.StatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::ServiceStat > service_stats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_start_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto;
};
// ===================================================================

class BuiltinService_Stub;

class BuiltinService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BuiltinService() {};
 public:
  virtual ~BuiltinService();

  typedef BuiltinService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Health(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::HealthRequest* request,
                       ::sofa::pbrpc::builtin::HealthResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ServerOptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::ServerOptionsRequest* request,
                       ::sofa::pbrpc::builtin::ServerOptionsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateOptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::UpdateOptionsRequest* request,
                       ::sofa::pbrpc::builtin::UpdateOptionsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ServerStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::ServerStatusRequest* request,
                       ::sofa::pbrpc::builtin::ServerStatusResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ListService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::ListServiceRequest* request,
                       ::sofa::pbrpc::builtin::ListServiceResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Stat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::StatRequest* request,
                       ::sofa::pbrpc::builtin::StatResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BuiltinService);
};

class BuiltinService_Stub : public BuiltinService {
 public:
  BuiltinService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  BuiltinService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~BuiltinService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements BuiltinService ------------------------------------------

  void Health(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::HealthRequest* request,
                       ::sofa::pbrpc::builtin::HealthResponse* response,
                       ::google::protobuf::Closure* done);
  void ServerOptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::ServerOptionsRequest* request,
                       ::sofa::pbrpc::builtin::ServerOptionsResponse* response,
                       ::google::protobuf::Closure* done);
  void UpdateOptions(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::UpdateOptionsRequest* request,
                       ::sofa::pbrpc::builtin::UpdateOptionsResponse* response,
                       ::google::protobuf::Closure* done);
  void ServerStatus(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::ServerStatusRequest* request,
                       ::sofa::pbrpc::builtin::ServerStatusResponse* response,
                       ::google::protobuf::Closure* done);
  void ListService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::ListServiceRequest* request,
                       ::sofa::pbrpc::builtin::ListServiceResponse* response,
                       ::google::protobuf::Closure* done);
  void Stat(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::sofa::pbrpc::builtin::StatRequest* request,
                       ::sofa::pbrpc::builtin::StatResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BuiltinService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthRequest

// -------------------------------------------------------------------

// HealthResponse

// string health = 1;
inline void HealthResponse::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthResponse::health() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.HealthResponse.health)
  return _internal_health();
}
inline void HealthResponse::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.HealthResponse.health)
}
inline std::string* HealthResponse::mutable_health() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.HealthResponse.health)
  return _internal_mutable_health();
}
inline const std::string& HealthResponse::_internal_health() const {
  return health_.Get();
}
inline void HealthResponse::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthResponse::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.builtin.HealthResponse.health)
}
inline void HealthResponse::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.HealthResponse.health)
}
inline void HealthResponse::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.HealthResponse.health)
}
inline std::string* HealthResponse::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthResponse::release_health() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.HealthResponse.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthResponse::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.HealthResponse.health)
}
inline std::string* HealthResponse::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.builtin.HealthResponse.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthResponse::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.HealthResponse.health)
}

// string version = 2;
inline void HealthResponse::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthResponse::version() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.HealthResponse.version)
  return _internal_version();
}
inline void HealthResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.HealthResponse.version)
}
inline std::string* HealthResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.HealthResponse.version)
  return _internal_mutable_version();
}
inline const std::string& HealthResponse::_internal_version() const {
  return version_.Get();
}
inline void HealthResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthResponse::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.builtin.HealthResponse.version)
}
inline void HealthResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.HealthResponse.version)
}
inline void HealthResponse::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.HealthResponse.version)
}
inline std::string* HealthResponse::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthResponse::release_version() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.HealthResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.HealthResponse.version)
}
inline std::string* HealthResponse::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.builtin.HealthResponse.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthResponse::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.HealthResponse.version)
}

// string start_time = 3;
inline void HealthResponse::clear_start_time() {
  start_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthResponse::start_time() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.HealthResponse.start_time)
  return _internal_start_time();
}
inline void HealthResponse::set_start_time(const std::string& value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.HealthResponse.start_time)
}
inline std::string* HealthResponse::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.HealthResponse.start_time)
  return _internal_mutable_start_time();
}
inline const std::string& HealthResponse::_internal_start_time() const {
  return start_time_.Get();
}
inline void HealthResponse::_internal_set_start_time(const std::string& value) {
  
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthResponse::set_start_time(std::string&& value) {
  
  start_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.builtin.HealthResponse.start_time)
}
inline void HealthResponse::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.HealthResponse.start_time)
}
inline void HealthResponse::set_start_time(const char* value,
    size_t size) {
  
  start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.HealthResponse.start_time)
}
inline std::string* HealthResponse::_internal_mutable_start_time() {
  
  return start_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthResponse::release_start_time() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.HealthResponse.start_time)
  return start_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthResponse::set_allocated_start_time(std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.HealthResponse.start_time)
}
inline std::string* HealthResponse::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.builtin.HealthResponse.start_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthResponse::unsafe_arena_set_allocated_start_time(
    std::string* start_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.HealthResponse.start_time)
}

// -------------------------------------------------------------------

// ServerOptions

// int64 work_thread_num = 1;
inline void ServerOptions::clear_work_thread_num() {
  work_thread_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::_internal_work_thread_num() const {
  return work_thread_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::work_thread_num() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.work_thread_num)
  return _internal_work_thread_num();
}
inline void ServerOptions::_internal_set_work_thread_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  work_thread_num_ = value;
}
inline void ServerOptions::set_work_thread_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_work_thread_num(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.work_thread_num)
}

// int64 keep_alive_time = 2;
inline void ServerOptions::clear_keep_alive_time() {
  keep_alive_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::_internal_keep_alive_time() const {
  return keep_alive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::keep_alive_time() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.keep_alive_time)
  return _internal_keep_alive_time();
}
inline void ServerOptions::_internal_set_keep_alive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  keep_alive_time_ = value;
}
inline void ServerOptions::set_keep_alive_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_keep_alive_time(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.keep_alive_time)
}

// int64 max_pending_buffer_size = 3;
inline void ServerOptions::clear_max_pending_buffer_size() {
  max_pending_buffer_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::_internal_max_pending_buffer_size() const {
  return max_pending_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::max_pending_buffer_size() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.max_pending_buffer_size)
  return _internal_max_pending_buffer_size();
}
inline void ServerOptions::_internal_set_max_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_pending_buffer_size_ = value;
}
inline void ServerOptions::set_max_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_pending_buffer_size(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.max_pending_buffer_size)
}

// int64 max_throughput_in = 4;
inline void ServerOptions::clear_max_throughput_in() {
  max_throughput_in_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::_internal_max_throughput_in() const {
  return max_throughput_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::max_throughput_in() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.max_throughput_in)
  return _internal_max_throughput_in();
}
inline void ServerOptions::_internal_set_max_throughput_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_throughput_in_ = value;
}
inline void ServerOptions::set_max_throughput_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_throughput_in(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.max_throughput_in)
}

// int64 max_throughput_out = 5;
inline void ServerOptions::clear_max_throughput_out() {
  max_throughput_out_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::_internal_max_throughput_out() const {
  return max_throughput_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::max_throughput_out() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.max_throughput_out)
  return _internal_max_throughput_out();
}
inline void ServerOptions::_internal_set_max_throughput_out(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_throughput_out_ = value;
}
inline void ServerOptions::set_max_throughput_out(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_throughput_out(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.max_throughput_out)
}

// bool disable_builtin_services = 6;
inline void ServerOptions::clear_disable_builtin_services() {
  disable_builtin_services_ = false;
}
inline bool ServerOptions::_internal_disable_builtin_services() const {
  return disable_builtin_services_;
}
inline bool ServerOptions::disable_builtin_services() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.disable_builtin_services)
  return _internal_disable_builtin_services();
}
inline void ServerOptions::_internal_set_disable_builtin_services(bool value) {
  
  disable_builtin_services_ = value;
}
inline void ServerOptions::set_disable_builtin_services(bool value) {
  _internal_set_disable_builtin_services(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.disable_builtin_services)
}

// bool disable_list_service = 7;
inline void ServerOptions::clear_disable_list_service() {
  disable_list_service_ = false;
}
inline bool ServerOptions::_internal_disable_list_service() const {
  return disable_list_service_;
}
inline bool ServerOptions::disable_list_service() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.disable_list_service)
  return _internal_disable_list_service();
}
inline void ServerOptions::_internal_set_disable_list_service(bool value) {
  
  disable_list_service_ = value;
}
inline void ServerOptions::set_disable_list_service(bool value) {
  _internal_set_disable_list_service(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.disable_list_service)
}

// int64 max_connection_count = 8;
inline void ServerOptions::clear_max_connection_count() {
  max_connection_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::_internal_max_connection_count() const {
  return max_connection_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerOptions::max_connection_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptions.max_connection_count)
  return _internal_max_connection_count();
}
inline void ServerOptions::_internal_set_max_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_connection_count_ = value;
}
inline void ServerOptions::set_max_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_connection_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerOptions.max_connection_count)
}

// -------------------------------------------------------------------

// ServerOptionsRequest

// -------------------------------------------------------------------

// ServerOptionsResponse

// .sofa.pbrpc.builtin.ServerOptions options = 1;
inline bool ServerOptionsResponse::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool ServerOptionsResponse::has_options() const {
  return _internal_has_options();
}
inline void ServerOptionsResponse::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::sofa::pbrpc::builtin::ServerOptions& ServerOptionsResponse::_internal_options() const {
  const ::sofa::pbrpc::builtin::ServerOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sofa::pbrpc::builtin::ServerOptions*>(
      &::sofa::pbrpc::builtin::_ServerOptions_default_instance_);
}
inline const ::sofa::pbrpc::builtin::ServerOptions& ServerOptionsResponse::options() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerOptionsResponse.options)
  return _internal_options();
}
inline void ServerOptionsResponse::unsafe_arena_set_allocated_options(
    ::sofa::pbrpc::builtin::ServerOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.ServerOptionsResponse.options)
}
inline ::sofa::pbrpc::builtin::ServerOptions* ServerOptionsResponse::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sofa::pbrpc::builtin::ServerOptions* ServerOptionsResponse::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.ServerOptionsResponse.options)
  
  ::sofa::pbrpc::builtin::ServerOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::sofa::pbrpc::builtin::ServerOptions* ServerOptionsResponse::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::sofa::pbrpc::builtin::ServerOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::sofa::pbrpc::builtin::ServerOptions* ServerOptionsResponse::mutable_options() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.ServerOptionsResponse.options)
  return _internal_mutable_options();
}
inline void ServerOptionsResponse::set_allocated_options(::sofa::pbrpc::builtin::ServerOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.ServerOptionsResponse.options)
}

// -------------------------------------------------------------------

// UpdateOptionsRequest

// .sofa.pbrpc.builtin.ServerOptions options = 1;
inline bool UpdateOptionsRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateOptionsRequest::has_options() const {
  return _internal_has_options();
}
inline void UpdateOptionsRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::sofa::pbrpc::builtin::ServerOptions& UpdateOptionsRequest::_internal_options() const {
  const ::sofa::pbrpc::builtin::ServerOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sofa::pbrpc::builtin::ServerOptions*>(
      &::sofa::pbrpc::builtin::_ServerOptions_default_instance_);
}
inline const ::sofa::pbrpc::builtin::ServerOptions& UpdateOptionsRequest::options() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.UpdateOptionsRequest.options)
  return _internal_options();
}
inline void UpdateOptionsRequest::unsafe_arena_set_allocated_options(
    ::sofa::pbrpc::builtin::ServerOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.UpdateOptionsRequest.options)
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.UpdateOptionsRequest.options)
  
  ::sofa::pbrpc::builtin::ServerOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::sofa::pbrpc::builtin::ServerOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.UpdateOptionsRequest.options)
  return _internal_mutable_options();
}
inline void UpdateOptionsRequest::set_allocated_options(::sofa::pbrpc::builtin::ServerOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.UpdateOptionsRequest.options)
}

// -------------------------------------------------------------------

// UpdateOptionsResponse

// .sofa.pbrpc.builtin.ServerOptions options = 1;
inline bool UpdateOptionsResponse::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool UpdateOptionsResponse::has_options() const {
  return _internal_has_options();
}
inline void UpdateOptionsResponse::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::sofa::pbrpc::builtin::ServerOptions& UpdateOptionsResponse::_internal_options() const {
  const ::sofa::pbrpc::builtin::ServerOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::sofa::pbrpc::builtin::ServerOptions*>(
      &::sofa::pbrpc::builtin::_ServerOptions_default_instance_);
}
inline const ::sofa::pbrpc::builtin::ServerOptions& UpdateOptionsResponse::options() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.UpdateOptionsResponse.options)
  return _internal_options();
}
inline void UpdateOptionsResponse::unsafe_arena_set_allocated_options(
    ::sofa::pbrpc::builtin::ServerOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.UpdateOptionsResponse.options)
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsResponse::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsResponse::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.UpdateOptionsResponse.options)
  
  ::sofa::pbrpc::builtin::ServerOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsResponse::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::sofa::pbrpc::builtin::ServerOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::sofa::pbrpc::builtin::ServerOptions* UpdateOptionsResponse::mutable_options() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.UpdateOptionsResponse.options)
  return _internal_mutable_options();
}
inline void UpdateOptionsResponse::set_allocated_options(::sofa::pbrpc::builtin::ServerOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.UpdateOptionsResponse.options)
}

// -------------------------------------------------------------------

// ServerStatusRequest

// -------------------------------------------------------------------

// ServerStatusResponse

// bool is_listening = 1;
inline void ServerStatusResponse::clear_is_listening() {
  is_listening_ = false;
}
inline bool ServerStatusResponse::_internal_is_listening() const {
  return is_listening_;
}
inline bool ServerStatusResponse::is_listening() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerStatusResponse.is_listening)
  return _internal_is_listening();
}
inline void ServerStatusResponse::_internal_set_is_listening(bool value) {
  
  is_listening_ = value;
}
inline void ServerStatusResponse::set_is_listening(bool value) {
  _internal_set_is_listening(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerStatusResponse.is_listening)
}

// int64 connection_count = 2;
inline void ServerStatusResponse::clear_connection_count() {
  connection_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::_internal_connection_count() const {
  return connection_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::connection_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerStatusResponse.connection_count)
  return _internal_connection_count();
}
inline void ServerStatusResponse::_internal_set_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  connection_count_ = value;
}
inline void ServerStatusResponse::set_connection_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_connection_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerStatusResponse.connection_count)
}

// int64 service_count = 3;
inline void ServerStatusResponse::clear_service_count() {
  service_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::_internal_service_count() const {
  return service_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::service_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerStatusResponse.service_count)
  return _internal_service_count();
}
inline void ServerStatusResponse::_internal_set_service_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  service_count_ = value;
}
inline void ServerStatusResponse::set_service_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_service_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerStatusResponse.service_count)
}

// int64 pending_message_count = 4;
inline void ServerStatusResponse::clear_pending_message_count() {
  pending_message_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::_internal_pending_message_count() const {
  return pending_message_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::pending_message_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerStatusResponse.pending_message_count)
  return _internal_pending_message_count();
}
inline void ServerStatusResponse::_internal_set_pending_message_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pending_message_count_ = value;
}
inline void ServerStatusResponse::set_pending_message_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pending_message_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerStatusResponse.pending_message_count)
}

// int64 pending_buffer_size = 5;
inline void ServerStatusResponse::clear_pending_buffer_size() {
  pending_buffer_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::_internal_pending_buffer_size() const {
  return pending_buffer_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::pending_buffer_size() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerStatusResponse.pending_buffer_size)
  return _internal_pending_buffer_size();
}
inline void ServerStatusResponse::_internal_set_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pending_buffer_size_ = value;
}
inline void ServerStatusResponse::set_pending_buffer_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pending_buffer_size(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerStatusResponse.pending_buffer_size)
}

// int64 pending_data_size = 6;
inline void ServerStatusResponse::clear_pending_data_size() {
  pending_data_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::_internal_pending_data_size() const {
  return pending_data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerStatusResponse::pending_data_size() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServerStatusResponse.pending_data_size)
  return _internal_pending_data_size();
}
inline void ServerStatusResponse::_internal_set_pending_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pending_data_size_ = value;
}
inline void ServerStatusResponse::set_pending_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pending_data_size(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServerStatusResponse.pending_data_size)
}

// -------------------------------------------------------------------

// ListServiceRequest

// -------------------------------------------------------------------

// ListServiceResponse

// repeated string services = 1;
inline int ListServiceResponse::_internal_services_size() const {
  return services_.size();
}
inline int ListServiceResponse::services_size() const {
  return _internal_services_size();
}
inline void ListServiceResponse::clear_services() {
  services_.Clear();
}
inline std::string* ListServiceResponse::add_services() {
  // @@protoc_insertion_point(field_add_mutable:sofa.pbrpc.builtin.ListServiceResponse.services)
  return _internal_add_services();
}
inline const std::string& ListServiceResponse::_internal_services(int index) const {
  return services_.Get(index);
}
inline const std::string& ListServiceResponse::services(int index) const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ListServiceResponse.services)
  return _internal_services(index);
}
inline std::string* ListServiceResponse::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.ListServiceResponse.services)
  return services_.Mutable(index);
}
inline void ListServiceResponse::set_services(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ListServiceResponse.services)
  services_.Mutable(index)->assign(value);
}
inline void ListServiceResponse::set_services(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ListServiceResponse.services)
  services_.Mutable(index)->assign(std::move(value));
}
inline void ListServiceResponse::set_services(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.ListServiceResponse.services)
}
inline void ListServiceResponse::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.ListServiceResponse.services)
}
inline std::string* ListServiceResponse::_internal_add_services() {
  return services_.Add();
}
inline void ListServiceResponse::add_services(const std::string& value) {
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sofa.pbrpc.builtin.ListServiceResponse.services)
}
inline void ListServiceResponse::add_services(std::string&& value) {
  services_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sofa.pbrpc.builtin.ListServiceResponse.services)
}
inline void ListServiceResponse::add_services(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sofa.pbrpc.builtin.ListServiceResponse.services)
}
inline void ListServiceResponse::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sofa.pbrpc.builtin.ListServiceResponse.services)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListServiceResponse::services() const {
  // @@protoc_insertion_point(field_list:sofa.pbrpc.builtin.ListServiceResponse.services)
  return services_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListServiceResponse::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:sofa.pbrpc.builtin.ListServiceResponse.services)
  return &services_;
}

// repeated .google.protobuf.FileDescriptorProto files = 2;
inline int ListServiceResponse::_internal_files_size() const {
  return files_.size();
}
inline int ListServiceResponse::files_size() const {
  return _internal_files_size();
}
inline PROTOBUF_NAMESPACE_ID::FileDescriptorProto* ListServiceResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.ListServiceResponse.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FileDescriptorProto >*
ListServiceResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:sofa.pbrpc.builtin.ListServiceResponse.files)
  return &files_;
}
inline const PROTOBUF_NAMESPACE_ID::FileDescriptorProto& ListServiceResponse::_internal_files(int index) const {
  return files_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::FileDescriptorProto& ListServiceResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ListServiceResponse.files)
  return _internal_files(index);
}
inline PROTOBUF_NAMESPACE_ID::FileDescriptorProto* ListServiceResponse::_internal_add_files() {
  return files_.Add();
}
inline PROTOBUF_NAMESPACE_ID::FileDescriptorProto* ListServiceResponse::add_files() {
  // @@protoc_insertion_point(field_add:sofa.pbrpc.builtin.ListServiceResponse.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::FileDescriptorProto >&
ListServiceResponse::files() const {
  // @@protoc_insertion_point(field_list:sofa.pbrpc.builtin.ListServiceResponse.files)
  return files_;
}

// -------------------------------------------------------------------

// MethodStat

// string method_name = 1;
inline void MethodStat::clear_method_name() {
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MethodStat::method_name() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.method_name)
  return _internal_method_name();
}
inline void MethodStat::set_method_name(const std::string& value) {
  _internal_set_method_name(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.method_name)
}
inline std::string* MethodStat::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.MethodStat.method_name)
  return _internal_mutable_method_name();
}
inline const std::string& MethodStat::_internal_method_name() const {
  return method_name_.Get();
}
inline void MethodStat::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MethodStat::set_method_name(std::string&& value) {
  
  method_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.builtin.MethodStat.method_name)
}
inline void MethodStat::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.MethodStat.method_name)
}
inline void MethodStat::set_method_name(const char* value,
    size_t size) {
  
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.MethodStat.method_name)
}
inline std::string* MethodStat::_internal_mutable_method_name() {
  
  return method_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MethodStat::release_method_name() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.MethodStat.method_name)
  return method_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MethodStat::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.MethodStat.method_name)
}
inline std::string* MethodStat::unsafe_arena_release_method_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.builtin.MethodStat.method_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MethodStat::unsafe_arena_set_allocated_method_name(
    std::string* method_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.MethodStat.method_name)
}

// int64 succeed_count = 2;
inline void MethodStat::clear_succeed_count() {
  succeed_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::_internal_succeed_count() const {
  return succeed_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::succeed_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.succeed_count)
  return _internal_succeed_count();
}
inline void MethodStat::_internal_set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  succeed_count_ = value;
}
inline void MethodStat::set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_succeed_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.succeed_count)
}

// float succeed_avg_time_us = 3;
inline void MethodStat::clear_succeed_avg_time_us() {
  succeed_avg_time_us_ = 0;
}
inline float MethodStat::_internal_succeed_avg_time_us() const {
  return succeed_avg_time_us_;
}
inline float MethodStat::succeed_avg_time_us() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.succeed_avg_time_us)
  return _internal_succeed_avg_time_us();
}
inline void MethodStat::_internal_set_succeed_avg_time_us(float value) {
  
  succeed_avg_time_us_ = value;
}
inline void MethodStat::set_succeed_avg_time_us(float value) {
  _internal_set_succeed_avg_time_us(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.succeed_avg_time_us)
}

// int64 succeed_max_time_us = 4;
inline void MethodStat::clear_succeed_max_time_us() {
  succeed_max_time_us_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::_internal_succeed_max_time_us() const {
  return succeed_max_time_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::succeed_max_time_us() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.succeed_max_time_us)
  return _internal_succeed_max_time_us();
}
inline void MethodStat::_internal_set_succeed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  succeed_max_time_us_ = value;
}
inline void MethodStat::set_succeed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_succeed_max_time_us(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.succeed_max_time_us)
}

// int64 failed_count = 5;
inline void MethodStat::clear_failed_count() {
  failed_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::_internal_failed_count() const {
  return failed_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::failed_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.failed_count)
  return _internal_failed_count();
}
inline void MethodStat::_internal_set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  failed_count_ = value;
}
inline void MethodStat::set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_failed_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.failed_count)
}

// float failed_avg_time_us = 6;
inline void MethodStat::clear_failed_avg_time_us() {
  failed_avg_time_us_ = 0;
}
inline float MethodStat::_internal_failed_avg_time_us() const {
  return failed_avg_time_us_;
}
inline float MethodStat::failed_avg_time_us() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.failed_avg_time_us)
  return _internal_failed_avg_time_us();
}
inline void MethodStat::_internal_set_failed_avg_time_us(float value) {
  
  failed_avg_time_us_ = value;
}
inline void MethodStat::set_failed_avg_time_us(float value) {
  _internal_set_failed_avg_time_us(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.failed_avg_time_us)
}

// int64 failed_max_time_us = 7;
inline void MethodStat::clear_failed_max_time_us() {
  failed_max_time_us_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::_internal_failed_max_time_us() const {
  return failed_max_time_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::failed_max_time_us() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.failed_max_time_us)
  return _internal_failed_max_time_us();
}
inline void MethodStat::_internal_set_failed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  failed_max_time_us_ = value;
}
inline void MethodStat::set_failed_max_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_failed_max_time_us(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.failed_max_time_us)
}

// int64 slot_id = 8;
inline void MethodStat::clear_slot_id() {
  slot_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::_internal_slot_id() const {
  return slot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MethodStat::slot_id() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.MethodStat.slot_id)
  return _internal_slot_id();
}
inline void MethodStat::_internal_set_slot_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  slot_id_ = value;
}
inline void MethodStat::set_slot_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.MethodStat.slot_id)
}

// -------------------------------------------------------------------

// ServiceStat

// string service_name = 1;
inline void ServiceStat::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceStat::service_name() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServiceStat.service_name)
  return _internal_service_name();
}
inline void ServiceStat::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServiceStat.service_name)
}
inline std::string* ServiceStat::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.ServiceStat.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ServiceStat::_internal_service_name() const {
  return service_name_.Get();
}
inline void ServiceStat::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceStat::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.builtin.ServiceStat.service_name)
}
inline void ServiceStat::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.ServiceStat.service_name)
}
inline void ServiceStat::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.ServiceStat.service_name)
}
inline std::string* ServiceStat::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceStat::release_service_name() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.ServiceStat.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceStat::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.ServiceStat.service_name)
}
inline std::string* ServiceStat::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.builtin.ServiceStat.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceStat::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.ServiceStat.service_name)
}

// int64 period_seconds = 2;
inline void ServiceStat::clear_period_seconds() {
  period_seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceStat::_internal_period_seconds() const {
  return period_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceStat::period_seconds() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServiceStat.period_seconds)
  return _internal_period_seconds();
}
inline void ServiceStat::_internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  period_seconds_ = value;
}
inline void ServiceStat::set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_period_seconds(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServiceStat.period_seconds)
}

// int64 succeed_count = 3;
inline void ServiceStat::clear_succeed_count() {
  succeed_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceStat::_internal_succeed_count() const {
  return succeed_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceStat::succeed_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServiceStat.succeed_count)
  return _internal_succeed_count();
}
inline void ServiceStat::_internal_set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  succeed_count_ = value;
}
inline void ServiceStat::set_succeed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_succeed_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServiceStat.succeed_count)
}

// int64 failed_count = 4;
inline void ServiceStat::clear_failed_count() {
  failed_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceStat::_internal_failed_count() const {
  return failed_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceStat::failed_count() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServiceStat.failed_count)
  return _internal_failed_count();
}
inline void ServiceStat::_internal_set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  failed_count_ = value;
}
inline void ServiceStat::set_failed_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_failed_count(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.ServiceStat.failed_count)
}

// repeated .sofa.pbrpc.builtin.MethodStat method_stats = 5;
inline int ServiceStat::_internal_method_stats_size() const {
  return method_stats_.size();
}
inline int ServiceStat::method_stats_size() const {
  return _internal_method_stats_size();
}
inline void ServiceStat::clear_method_stats() {
  method_stats_.Clear();
}
inline ::sofa::pbrpc::builtin::MethodStat* ServiceStat::mutable_method_stats(int index) {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.ServiceStat.method_stats)
  return method_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::MethodStat >*
ServiceStat::mutable_method_stats() {
  // @@protoc_insertion_point(field_mutable_list:sofa.pbrpc.builtin.ServiceStat.method_stats)
  return &method_stats_;
}
inline const ::sofa::pbrpc::builtin::MethodStat& ServiceStat::_internal_method_stats(int index) const {
  return method_stats_.Get(index);
}
inline const ::sofa::pbrpc::builtin::MethodStat& ServiceStat::method_stats(int index) const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.ServiceStat.method_stats)
  return _internal_method_stats(index);
}
inline ::sofa::pbrpc::builtin::MethodStat* ServiceStat::_internal_add_method_stats() {
  return method_stats_.Add();
}
inline ::sofa::pbrpc::builtin::MethodStat* ServiceStat::add_method_stats() {
  // @@protoc_insertion_point(field_add:sofa.pbrpc.builtin.ServiceStat.method_stats)
  return _internal_add_method_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::MethodStat >&
ServiceStat::method_stats() const {
  // @@protoc_insertion_point(field_list:sofa.pbrpc.builtin.ServiceStat.method_stats)
  return method_stats_;
}

// -------------------------------------------------------------------

// StatRequest

// string service_name = 1;
inline void StatRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatRequest::service_name() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.StatRequest.service_name)
  return _internal_service_name();
}
inline void StatRequest::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.StatRequest.service_name)
}
inline std::string* StatRequest::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.StatRequest.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& StatRequest::_internal_service_name() const {
  return service_name_.Get();
}
inline void StatRequest::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatRequest::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.builtin.StatRequest.service_name)
}
inline void StatRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.StatRequest.service_name)
}
inline void StatRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.StatRequest.service_name)
}
inline std::string* StatRequest::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.StatRequest.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.StatRequest.service_name)
}
inline std::string* StatRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.builtin.StatRequest.service_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatRequest::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.StatRequest.service_name)
}

// int64 period_seconds = 2;
inline void StatRequest::clear_period_seconds() {
  period_seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatRequest::_internal_period_seconds() const {
  return period_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatRequest::period_seconds() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.StatRequest.period_seconds)
  return _internal_period_seconds();
}
inline void StatRequest::_internal_set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  period_seconds_ = value;
}
inline void StatRequest::set_period_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_period_seconds(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.StatRequest.period_seconds)
}

// -------------------------------------------------------------------

// StatResponse

// repeated .sofa.pbrpc.builtin.ServiceStat service_stats = 1;
inline int StatResponse::_internal_service_stats_size() const {
  return service_stats_.size();
}
inline int StatResponse::service_stats_size() const {
  return _internal_service_stats_size();
}
inline void StatResponse::clear_service_stats() {
  service_stats_.Clear();
}
inline ::sofa::pbrpc::builtin::ServiceStat* StatResponse::mutable_service_stats(int index) {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.StatResponse.service_stats)
  return service_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::ServiceStat >*
StatResponse::mutable_service_stats() {
  // @@protoc_insertion_point(field_mutable_list:sofa.pbrpc.builtin.StatResponse.service_stats)
  return &service_stats_;
}
inline const ::sofa::pbrpc::builtin::ServiceStat& StatResponse::_internal_service_stats(int index) const {
  return service_stats_.Get(index);
}
inline const ::sofa::pbrpc::builtin::ServiceStat& StatResponse::service_stats(int index) const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.StatResponse.service_stats)
  return _internal_service_stats(index);
}
inline ::sofa::pbrpc::builtin::ServiceStat* StatResponse::_internal_add_service_stats() {
  return service_stats_.Add();
}
inline ::sofa::pbrpc::builtin::ServiceStat* StatResponse::add_service_stats() {
  // @@protoc_insertion_point(field_add:sofa.pbrpc.builtin.StatResponse.service_stats)
  return _internal_add_service_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sofa::pbrpc::builtin::ServiceStat >&
StatResponse::service_stats() const {
  // @@protoc_insertion_point(field_list:sofa.pbrpc.builtin.StatResponse.service_stats)
  return service_stats_;
}

// string server_start_time = 2;
inline void StatResponse::clear_server_start_time() {
  server_start_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatResponse::server_start_time() const {
  // @@protoc_insertion_point(field_get:sofa.pbrpc.builtin.StatResponse.server_start_time)
  return _internal_server_start_time();
}
inline void StatResponse::set_server_start_time(const std::string& value) {
  _internal_set_server_start_time(value);
  // @@protoc_insertion_point(field_set:sofa.pbrpc.builtin.StatResponse.server_start_time)
}
inline std::string* StatResponse::mutable_server_start_time() {
  // @@protoc_insertion_point(field_mutable:sofa.pbrpc.builtin.StatResponse.server_start_time)
  return _internal_mutable_server_start_time();
}
inline const std::string& StatResponse::_internal_server_start_time() const {
  return server_start_time_.Get();
}
inline void StatResponse::_internal_set_server_start_time(const std::string& value) {
  
  server_start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatResponse::set_server_start_time(std::string&& value) {
  
  server_start_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sofa.pbrpc.builtin.StatResponse.server_start_time)
}
inline void StatResponse::set_server_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:sofa.pbrpc.builtin.StatResponse.server_start_time)
}
inline void StatResponse::set_server_start_time(const char* value,
    size_t size) {
  
  server_start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sofa.pbrpc.builtin.StatResponse.server_start_time)
}
inline std::string* StatResponse::_internal_mutable_server_start_time() {
  
  return server_start_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatResponse::release_server_start_time() {
  // @@protoc_insertion_point(field_release:sofa.pbrpc.builtin.StatResponse.server_start_time)
  return server_start_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatResponse::set_allocated_server_start_time(std::string* server_start_time) {
  if (server_start_time != nullptr) {
    
  } else {
    
  }
  server_start_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_start_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sofa.pbrpc.builtin.StatResponse.server_start_time)
}
inline std::string* StatResponse::unsafe_arena_release_server_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sofa.pbrpc.builtin.StatResponse.server_start_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_start_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatResponse::unsafe_arena_set_allocated_server_start_time(
    std::string* server_start_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_start_time != nullptr) {
    
  } else {
    
  }
  server_start_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_start_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sofa.pbrpc.builtin.StatResponse.server_start_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace builtin
}  // namespace pbrpc
}  // namespace sofa

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sofa_2fpbrpc_2fbuiltin_5fservice_2eproto
